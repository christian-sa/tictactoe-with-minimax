package tictactoe;

import java.util.Scanner;
import static tictactoe.Mark.*;

/**
 * Inhabits all possible ways to play the game and
 * {@link #menuLoop()} to choose from them.
 */
public abstract class Menu {

    public static void main(String[] args) { Menu.menuLoop(); }
    static Scanner scan = new Scanner(System.in);

    /**
     * Used to choose the game mode.
     * Gets the settings (generated by user input) from {@link #getInput()}.
     */
    private static void menuLoop() {
        while (true) {
            String input = getInput();
            // User input "exit" finish play session.
            if (input.equals("exit")) { break; }
            TicTacToe ticTacToe = new TicTacToe();
            switch (input) {
                case "user user":
                    pvp(ticTacToe);
                    break;
                case "easy user":
                    pve(ticTacToe, "easy", true);
                    break;
                case "user easy":
                    pve(ticTacToe, "easy", false);
                    break;
                case "easy easy":
                    aiBattle(ticTacToe, "easy", "easy");
                    break;
                case "medium user":
                    pve(ticTacToe, "medium", true);
                    break;
                case "user medium":
                    pve(ticTacToe, "medium", false);
                    break;
                case "medium medium":
                    aiBattle(ticTacToe, "medium", "medium");
                    break;
                case "hard user":
                    pve(ticTacToe, "hard", true);
                    break;
                case "user hard":
                    pve(ticTacToe, "hard", false);
                    break;
                case "hard hard": // Always results in draw. Both AIs play flawlessly.
                    aiBattle(ticTacToe, "hard", "hard");
                    break;
                case "easy medium":
                    aiBattle(ticTacToe, "easy", "medium");
                    break;
                case "easy hard":
                    aiBattle(ticTacToe, "easy", "hard");
                    break;
                case "medium easy":
                    aiBattle(ticTacToe, "medium", "easy");
                    break;
                case "medium hard":
                    aiBattle(ticTacToe, "medium", "hard");
                    break;
                case "hard medium":
                    aiBattle(ticTacToe, "hard", "medium");
                    break;
                case "hard easy":
                    aiBattle(ticTacToe, "hard", "easy");
                    break;
                default:
                    System.out.println("Unsupported settings.");
            }
        }
    }

    /**
     * Used for getting user input for game settings.
     * Only accepts a certain format and will request new input if invalid.
     * @return settings used for {@link #menuLoop()}.
     */
    private static String getInput() {
        while (true) {
            System.out.print("Input command: ");
            String input = scan.nextLine();
            if (input.equals("exit")) {
                return input;
            }
            String[] parameter = input.split(" ");
            if (parameter.length != 3 || !parameter[0].equals("start") ||
                    !parameter[1].equals("easy") && !parameter[1].equals("medium") &&
                    !parameter[1].equals("hard") && !parameter[1].equals("user") ||
                            !parameter[2].equals("easy") && !parameter[2].equals("medium") &&
                            !parameter[2].equals("hard") && !parameter[2].equals("user")) {
                System.out.println("Bad parameters!");
                continue;
            }
            return input.replace("start", "").trim();
        }
    }

    /**
     * Player vs. Player!
     * @param ticTacToe current instance of the game.
     */
    private static void pvp(TicTacToe ticTacToe) {
        ticTacToe.field.print();
        do {
            // Player 1s move.
            ticTacToe.field.playerMove(ticTacToe.getCoordinates(), 'X');
            // Checks for end of game.
            if (!ticTacToe.getGameState().equals("Game not finished")) { break; }
            // Player 2s move.
            ticTacToe.field.playerMove(ticTacToe.getCoordinates(), 'O');
        // Checks for end of game.
        } while (ticTacToe.getGameState().equals("Game not finished"));
        System.out.println(ticTacToe.getGameState());
    }

    /**
     * Player vs. AI!
     * @param ticTacToe current instance of the game.
     * @param difficulty sets the AIs difficulty.
     * @param aiGoesFirst determines if AI goes first.
     */
    private static void pve(TicTacToe ticTacToe, String difficulty, boolean aiGoesFirst) {
        // Gives the AI a marks based on if its supposed to go first.
        Mark markAI = aiGoesFirst ? X : O;
        // Opposite of the AIs mark.
        Mark markUser = aiGoesFirst ? O : X;
        ticTacToe.field.print();
        do {
            // AIs move. Skips first turn it its assigned mark O.
            AI.doCorrectMove(ticTacToe, markAI, difficulty);
            // Checks for end of game.
            if (!ticTacToe.getGameState().equals("Game not finished")) { break; }
            // Users move.
            ticTacToe.field.playerMove(ticTacToe.getCoordinates(), markUser);
        } while (ticTacToe.getGameState().equals("Game not finished"));
        System.out.println(ticTacToe.getGameState());
    }

    /**
     * AI vs. AI!
     * @param ticTacToe current instance of the game.
     * @param firstAIDifficulty difficulty level of the AI that takes first turn.
     * @param secondAIDifficulty other AIs difficulty.
     */
    private static void aiBattle(TicTacToe ticTacToe, String firstAIDifficulty, String secondAIDifficulty) {
        ticTacToe.field.print();
        do {
            // AI 1 move.
            AI.doCorrectMove(ticTacToe, X, firstAIDifficulty);
            // Checks for end of game.
            if (!ticTacToe.getGameState().equals("Game not finished")) { break; }
            // AI 2 move.
            AI.doCorrectMove(ticTacToe, O, secondAIDifficulty);
        } while (ticTacToe.getGameState().equals("Game not finished"));
        System.out.println(ticTacToe.getGameState());
    }

}
